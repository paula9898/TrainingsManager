// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TrainingsManager.Backend.EntityFramework.Data;

#nullable disable

namespace TrainingsManager.Backend.EntityFramework.Migrations
{
    [DbContext(typeof(TrainingsManagerDbContext))]
    [Migration("20230926140212_MigrationFive")]
    partial class MigrationFive
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TrainingsManager.Backend.Model.Activities.Activity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Calories")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("HeartFrequencyBPM")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("Time")
                        .HasColumnType("time");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Activities");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("TrainingsManager.Backend.Model.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Height")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Sex")
                        .HasColumnType("int");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Weight")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("TrainingsManager.Backend.Model.Activities.Cycling", b =>
                {
                    b.HasBaseType("TrainingsManager.Backend.Model.Activities.Activity");

                    b.Property<int>("Distance")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("Pace")
                        .HasColumnType("time");

                    b.ToTable("Cyclings", (string)null);
                });

            modelBuilder.Entity("TrainingsManager.Backend.Model.Activities.Running", b =>
                {
                    b.HasBaseType("TrainingsManager.Backend.Model.Activities.Activity");

                    b.Property<int>("Distance")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("Pace")
                        .HasColumnType("time");

                    b.ToTable("Runnings", (string)null);
                });

            modelBuilder.Entity("TrainingsManager.Backend.Model.Activities.Squatting", b =>
                {
                    b.HasBaseType("TrainingsManager.Backend.Model.Activities.Activity");

                    b.ToTable("Squattings", (string)null);
                });

            modelBuilder.Entity("TrainingsManager.Backend.Model.Activities.Activity", b =>
                {
                    b.HasOne("TrainingsManager.Backend.Model.User", "User")
                        .WithMany("Activities")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("TrainingsManager.Backend.Model.Activities.Cycling", b =>
                {
                    b.HasOne("TrainingsManager.Backend.Model.Activities.Activity", "Activity")
                        .WithOne("Cycling")
                        .HasForeignKey("TrainingsManager.Backend.Model.Activities.Cycling", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Activity");
                });

            modelBuilder.Entity("TrainingsManager.Backend.Model.Activities.Running", b =>
                {
                    b.HasOne("TrainingsManager.Backend.Model.Activities.Activity", "Activity")
                        .WithOne("Running")
                        .HasForeignKey("TrainingsManager.Backend.Model.Activities.Running", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Activity");
                });

            modelBuilder.Entity("TrainingsManager.Backend.Model.Activities.Squatting", b =>
                {
                    b.HasOne("TrainingsManager.Backend.Model.Activities.Activity", "Activity")
                        .WithOne("Squatting")
                        .HasForeignKey("TrainingsManager.Backend.Model.Activities.Squatting", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Activity");
                });

            modelBuilder.Entity("TrainingsManager.Backend.Model.Activities.Activity", b =>
                {
                    b.Navigation("Cycling")
                        .IsRequired();

                    b.Navigation("Running")
                        .IsRequired();

                    b.Navigation("Squatting")
                        .IsRequired();
                });

            modelBuilder.Entity("TrainingsManager.Backend.Model.User", b =>
                {
                    b.Navigation("Activities");
                });
#pragma warning restore 612, 618
        }
    }
}
